Problem Description
Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.

If the answer does not exist return an array with a single integer "-1".

First sub-array means the sub-array for which starting index in minimum.



Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 109



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the first continuous sub-array which adds to B and if the answer does not exist return an array with a single integer "-1".



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
 B = 5
Input 2:

 A = [5, 10, 20, 100, 105]
 B = 110


Example Output
Output 1:

 [2, 3]
Output 2:

 [-1]

Solution

public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, int B) {
        long sum = 0l;
        int i=0,j=0;
        boolean flag = false;
        while(i<A.size()){
            if(sum<B){
            sum = sum + A.get(i);
            i++;
            }
            if(sum>B){
                sum = sum - A.get(j);
                j++;
            }
            if(sum==B){
                flag = true;
                break;
            }
        }
        ArrayList<Integer> C = new ArrayList<>();
        if(flag == true)
        for(int k=j;k<i;k++){
            C.add(A.get(k));
        }
        else{
            C.add(-1);
        }

        return C;
    }
}
