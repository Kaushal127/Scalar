Problem Description
Find the lowest common ancestor in an unordered binary tree A, given two values, B and C, in the tree.

Lowest common ancestor: the lowest common ancestor (LCA) of two nodes and w in a tree or directed acyclic graph (DAG) is the lowest (i.e., deepest) node that has both v and w as descendants.



Problem Constraints
1 <= size of tree <= 100000

1 <= B, C <= 109



Input Format
First argument is head of tree A.

Second argument is integer B.

Third argument is integer C.



Output Format
Return the LCA.



Example Input
Input 1:

 
      1
     /  \
    2    3
B = 2
C = 3
Input 2:

      1
     /  \
    2    3
   / \
  4   5
B = 4
C = 5


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 LCA is 1.
Explanation 2:

 LCA is 2.



/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int lca(TreeNode A, int B, int C) {
        ArrayList<TreeNode> l1 = nodeRootPath( A , B) ;
        ArrayList<TreeNode> l2 = nodeRootPath( A , C) ;

        if (l1.size()==0 || l2.size()==0){
            return -1 ;
        }
        int i=l1.size()-1 ;
        int j = l2.size()-1 ;

        while (i>=0 && j>=0 && l1.get(i)==l2.get(j)){
            i--;
            j--;
        }
        return l1.get(i+1).val  ;
    }
    public ArrayList<TreeNode> nodeRootPath(TreeNode root , int val ){
        if (root== null){
            return new ArrayList<>() ;
        }
        if (root.val == val) {
            ArrayList<TreeNode> temp = new ArrayList<>() ;
            temp.add(root) ;
            return temp ;
        }
        ArrayList<TreeNode> la = nodeRootPath(root.left ,val) ;
        if (la.size()>0){
            la.add(root) ;
            return la ;
        }
         ArrayList<TreeNode> ra = nodeRootPath(root.right ,val) ;
        if (ra.size()>0){
            ra.add(root) ;
            return ra ;
        }
         return new ArrayList<>() ;
    }
}

