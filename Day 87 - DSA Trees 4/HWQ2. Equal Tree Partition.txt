Problem Description
Given a binary tree A. Check whether it is possible to partition the tree to two trees which have equal sum of values after removing exactly one edge on the original tree.



Problem Constraints
1 <= size of tree <= 100000

0 <= value of node <= 109



Input Format
First and only argument is head of tree A.



Output Format
Return 1 if the tree can be partitioned into two trees of equal sum else return 0.



Example Input
Input 1:

 
                5
               /  \
              3    7
             / \  / \
            4  6  5  6
Input 2:

 
                1
               / \
              2   10
                  / \
                 20  2


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 Remove edge between 5(root node) and 7: 
        Tree 1 =                                               Tree 2 =
                        5                                                     7
                       /                                                     / \
                      3                                                     5   6    
                     / \
                    4   6
        Sum of Tree 1 = Sum of Tree 2 = 18
Explanation 2:

 The given Tree cannot be partitioned.



/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int solve(TreeNode A) {
             Map<Long, Integer> map = new HashMap<>();
        // Calculate the total sum of the binary tree and populate the map
        long total_sum = populate(A, map);
        // Check if the total sum is divisible by 2
        if (total_sum % 2 != 0) {
            return 0; // If not divisible, return 0
        }
        // Check if the map contains the sum divided by 2 as a key found return 1
        if (map.containsKey(total_sum / 2)) {
            return 1;
        }
        return 0; // If not found, return 0
    }

    public long populate(TreeNode a, Map<Long, Integer> map) {
        if (a == null) {
            return 0; // Base case: return 0 if node is null
        }

        // Calculate the sum of the current node and its left and right subtrees recursively
        long sum = a.val + populate(a.left, map) + populate(a.right, map);

        // Update the map with the current sum and its frequency
        map.put(sum, map.getOrDefault(sum, 0) + 1);

        return sum; // Return the calculated sum
    }
}
