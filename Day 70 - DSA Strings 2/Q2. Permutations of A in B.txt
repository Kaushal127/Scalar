Problem Description
You are given two strings, A and B, of size N and M, respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.



Problem Constraints
1 <= N < M <= 105



Input Format
Given two arguments, A and B of type String.



Output Format
Return a single integer, i.e., number of permutations of A present in B as a substring.



Example Input
Input 1:

 A = "abc"
 B = "abcbacabc"
Input 2:

 A = "aca"
 B = "acaa"


Example Output
Output 1:

 5
Output 2:

 2


Example Explanation
Explanation 1:

 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:

 Permutations of A that are present in B as substring are:
    1. aca
    2. caa 


public class Solution {
    public int solve(String A, String B) {
        int N = A.length() ;
        HashMap<Character,Integer> Amap = new HashMap<>() ;
          for (int i=0 ; i<A.length() ; i++){
              char ch = A.charAt(i) ;
              if (Amap.containsKey(ch)==false){
                  Amap.put(ch,1) ;
              } else {
                  int temp = Amap.get(ch) ;
                  temp++ ;
                  Amap.put(ch,temp) ;
              }
          }
         HashMap<Character,Integer> Bmap = new HashMap<>() ;
         for (int i=0 ; i<N ; i++){
              char chb = B.charAt(i) ;
              if (Bmap.containsKey(chb)==false){
                  Bmap.put(chb,1) ;
              } else {
                  int t = Bmap.get(chb) ;
                  t++ ;
                  Bmap.put(chb,t) ;
              }
          }
          int ans = 0 ;
          if (areMapsSame(Amap,Bmap)==true){
              ans++ ;
          }
          int s = 1 ;
          int e = N ;
          while (e<B.length()){
              char chr = B.charAt(s-1) ;
              int temp = Bmap.get(chr) ;
              temp-- ;
              Bmap.put(chr,temp) ;
              if (temp==0){
                  Bmap.remove(chr) ;
              }
              char cha = B.charAt(e) ;
              if(Bmap.containsKey(cha)==false){
                  Bmap.put(cha,1) ;
              } else {
                  int t = Bmap.get(cha) ;
                    t++ ;
                    Bmap.put(cha,t) ;
              }
              if(areMapsSame(Amap,Bmap)==true){
                  ans++ ;
              }
              s++ ;
              e++ ;
          }
        return ans ;
    }
    static boolean areMapsSame(HashMap<Character,Integer>map1 ,HashMap<Character,Integer>map2){
        if (map1.size()!= map2.size()){
            return false ;
        }
        for (int i=0 ; i<26 ; i++){
            char ch = (char)(i+'a') ;
            int f1 = 0 , f2 = 0 ;
            if (map1.containsKey(ch)==true){
                f1 = map1.get(ch) ;
            }
            if (map2.containsKey(ch)==true){
                f2 = map2.get(ch) ;
            }
            if(f1!=f2){
                return false ;
            }
        }
        return true ;
    }
}
