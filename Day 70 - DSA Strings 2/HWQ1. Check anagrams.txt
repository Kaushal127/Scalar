Problem Description
You are given two lowercase strings A and B each of length N. Return 1 if they are anagrams to each other and 0 if not.

Note : Two strings A and B are called anagrams to each other if A can be formed after rearranging the letters of B.


Problem Constraints
1 <= N <= 105
A and B are lowercase strings


Input Format
Both arguments A and B are a string.


Output Format
Return 1 if they are anagrams and 0 if not


Example Input
Input 1:
A = "cat"
B = "bat"
Input 2:
A = "secure"
B = "rescue"


Example Output
Output 1:
0
Output 2:
1


Example Explanation
For Input 1:
The words cannot be rearranged to form the same word. So, they are not anagrams.
For Input 2:
They are an anagram.


public class Solution {
    public int solve(String A, String B) { 
        if (A.length()!=B.length()) {
            return 0 ;
        } 
        HashMap<Character,Integer> Amap = new HashMap<>() ;
        HashMap<Character,Integer> Bmap = new HashMap<>() ;
         
         fillMap(Amap , A) ;
         fillMap(Bmap , B) ;
         
          return areMapsSame(Amap ,Bmap) ;
    }
     static void fillMap (HashMap<Character,Integer> map , String str){
         for (int i=0 ;i<str.length() ; i++){
             char ch = str.charAt(i) ;
             if(map.containsKey(ch)==false){
                 map.put(ch,1) ;
             } else {
                 int temp = map.get(ch) ;
                 temp++ ;
                 map.put(ch ,temp) ;
             }
         }
     }

     static int areMapsSame(HashMap<Character,Integer>map1 ,HashMap<Character,Integer>map2){
        if (map1.size()!= map2.size()){
            return 0 ;
        }
        for (int i=0 ; i<26 ; i++){
            char ch = (char)(i+'a') ;
            int f1 = 0 , f2 = 0 ;
            if (map1.containsKey(ch)==true){
                f1 = map1.get(ch) ;
            }
            if (map2.containsKey(ch)==true){
                f2 = map2.get(ch) ;
            }
            if(f1!=f2){
                return 0 ;
            }
        }
        return 1 ;
     }
}
