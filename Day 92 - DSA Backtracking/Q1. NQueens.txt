Problem Description
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer A, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.
The final list should be generated in such a way that the indices of the queens in each list should be in reverse lexicographical order.


Problem Constraints
1 <= A <= 10



Input Format
First argument is an integer n denoting the size of chessboard



Output Format
Return an array consisting of all distinct solutions in which each element is a 2d char array representing a unique solution.



Example Input
Input 1:

A = 4
Input 2:

A = 1


Example Output
Output 1:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Output 1:

[
 [Q]
]


Example Explanation
Explanation 1:

There exist only two distinct solutions to the 4-queens puzzle:
Explanation 1:

There exist only one distinct solutions to the 1-queens puzzle:



public class Solution {

    // isSafe function is used for to check whether the Q is perfect fit for the particar position or not
    public boolean isSafe(int row, int col , char[][] eachRow ){

        //Horizontal
        for(int i=0; i<eachRow.length; i++){
            if(eachRow[row][i] == 'Q'){
                return false;
            }
        }

        // vertical
         for(int i=0; i<eachRow.length; i++){
            if(eachRow[i][col] == 'Q'){
                return false;
            }
        }

        // upper left
        int r = row;
        for (int c =col; r>=0 && c>=0; r--,c--){
            if(eachRow[r][c] == 'Q'){
                return false;
            }  
        }
       
        // uper right
        r = row;
        for (int c =col; r>=0 && c<eachRow.length; r--,c++){
            if(eachRow[r][c] == 'Q'){
                return false;
            }  
        }

        //Lower left

        r = row;
        for (int c =col; c>=0 && r<eachRow.length; r++,c--){
            if(eachRow[r][c] == 'Q'){
                return false;
            }  
        }

        //Lower Right
        r = row;
        for (int c =col; c<eachRow.length && r<eachRow.length; r++,c++){
            if(eachRow[r][c] == 'Q'){
                return false;
            }  
        }


        return true;
    }
    // saveBoard function is for to change char array to 1D string array and to add in to the main allBoard 2D arraylist
    public void saveBoard(char[][] eachRow,  ArrayList<ArrayList<String>> allBoard ){
        ArrayList<String> subBoard = new ArrayList<String>();

        for(int i=0; i<eachRow.length; i++){
            String row = "";
            for(int j=0; j<eachRow.length; j++){
                if(eachRow[i][j] == 'Q'){
                    row += 'Q';
                }
                else{
                    row += '.';
                }

            }
            subBoard.add(row);
        }
        allBoard.add(subBoard);
    }
    // Helper function is for main logic
    public void helper (char[][] eachRow,  ArrayList<ArrayList<String>> allBoard, int col){
        if(col == eachRow.length){
            saveBoard(eachRow,allBoard);
            return;
        }
        for(int i=0; i<eachRow.length; i++){
            if(isSafe(i,col,eachRow)){
                eachRow[i][col] = 'Q';
                helper(eachRow,allBoard,col+1);
                eachRow[i][col] ='.';
            }
           
        }
    }
    public ArrayList<ArrayList<String>> solveNQueens(int A) {
        ArrayList<ArrayList<String>> allBoard = new ArrayList<>();
        // making the temporary char Array
        char [][] eachRow = new char[A][A];

        helper (eachRow,allBoard, 0);

        return allBoard;

    }
}