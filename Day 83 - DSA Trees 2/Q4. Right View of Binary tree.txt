Problem Description
Given a binary tree of integers denoted by root A. Return an array of integers representing the right view of the Binary tree.

Right view of a Binary Tree is a set of nodes visible when the tree is visited from Right side.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 10^9



Input Format
First and only argument is head of the binary tree A.



Output Format
Return an array, representing the right view of the binary tree.



Example Input
Input 1:

 
            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

 
            1
           /  \
          2    3
           \
            4
             \
              5


Example Output
Output 1:

 [1, 3, 7, 8]
Output 2:

 [1, 3, 4, 5]


Example Explanation
Explanation 1:

Right view is described.
Explanation 2:

Right view is described.


/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
   int max=-1;
public int[] solve(TreeNode A) {
List<Integer> list=new ArrayList();
rightView(A,list,0);
int[] arr=new int[list.size()];
for(int i=0;i<arr.length;i++)
arr[i]=list.get(i);
return arr;
}
public void rightView(TreeNode A,List<Integer> list,int depth)
{
if(A==null) return;
if(max<depth)
{
max=depth;
list.add(A.val);
}
rightView(A.right,list,depth+1);
rightView(A.left,list,depth+1);
return;
    }
}
