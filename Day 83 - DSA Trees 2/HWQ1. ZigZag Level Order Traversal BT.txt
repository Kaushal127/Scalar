Problem Description
Given a binary tree, return the zigzag level order traversal of its nodes values. (ie, from left to right, then right to left for the next level and alternate between).



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return a 2D integer array denoting the zigzag level order traversal of the given binary tree.



Example Input
Input 1:

    3
   / \
  9  20
    /  \
   15   7
Input 2:

   1
  / \
 6   2
    /
   3


Example Output
Output 1:

 [
   [3],
   [20, 9],
   [15, 7]
 ]
Output 2:

 [ 
   [1]
   [2, 6]
   [3]
 ]


Example Explanation
Explanation 1:

 Return the 2D array. Each row denotes the zigzag traversal of each level.



/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode A) {
        Queue<TreeNode> q = new ArrayDeque<>() ;
        ArrayList<ArrayList<Integer>> mainAns = new ArrayList<ArrayList<Integer>>() ;
        q.add(A) ;
        int level = 1 ;
          while (q.size() > 0) {
              int cs = q.size();
              ArrayList<Integer> ans = new ArrayList<>();
               for (int i=1 ; i<=cs ; i++) {           
                        TreeNode temp = q.remove();
                        ans.add(temp.val);
                        if(temp.left != null) q.add(temp.left);
                        if(temp.right != null) q.add(temp.right);
                   } 
                 if (level % 2 == 0) {
                Collections.reverse(ans);
            }
                mainAns.add(ans);
                level++ ;
          }
          return mainAns ;
    }
}
