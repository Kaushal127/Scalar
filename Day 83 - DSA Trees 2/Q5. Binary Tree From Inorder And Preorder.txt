Problem Description
Given preorder and inorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First argument is an integer array A denoting the preorder traversal of the tree.

Second argument is an integer array B denoting the inorder traversal of the tree.



Output Format
Return the root node of the binary tree.



Example Input
Input 1:

 A = [1, 2, 3]
 B = [2, 1, 3]
Input 2:

 A = [1, 6, 2, 3]
 B = [6, 1, 3, 2]


Example Output
Output 1:

   1
  / \
 2   3
Output 2:

   1  
  / \
 6   2
    /
   3


Example Explanation
Explanation 1:

 Create the binary tree and return the root node of the tree.

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
        public TreeNode buildTree(int[] A, int[] B) {
        int n = A.length ;
        return build (A,0,n-1,B,0,n-1) ;
    }
    public TreeNode build ( int[] A , int ps , int pe ,int[] B , int is , int ie ) {
        if (ps>pe || is>ie) {
            return null ;
        }
        TreeNode node = new TreeNode(A[ps]) ;
        int idx = -1 ;
         for (int k=is ; k<= ie ;k++){
             if(B[k]==node.val){
                 idx = k ;
                 break ;
             }
         }
         int lc = idx-is ;
         node.left = build (A,ps+1,ps+lc,B,is,idx-1) ;
         node.right = build (A,ps+lc+1,pe ,B,idx+1,ie) ;

         return node ;
    }
}
