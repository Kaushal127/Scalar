Problem Description
Given N jobs where every job is represented by following three elements of it.
Start Time
Finish Time
Profit Associated
Find and return the maximum profit subset of jobs such that no two jobs in the subset overlap.


Problem Constraints
1 <= N <= 105
1 <= A[i][0], A[i][1], A[i][2] <= 105


Input Format
The first and the only line of input contains a 2d array, A, of N x 3 integers:
A[i][0] : Start Time
A[i][1] : Finish Time
A[i][2] : Profit


Output Format
Return the maximum possible profit under the given conditions.


Example Input
Input 1:
A = [ [1, 2, 50],
      [3, 5, 20],
      [6, 19, 100],
      [2, 100, 200] ]
Input 2:
A = [ [10, 20, 50],
      [20, 30, 20],
      [30, 40, 100] ]


Example Output
Output 1:
250
Output 2:
170


Example Explanation
Explanation 1:
We can perform the 1st and the 4th job.
Profit = 50 + 200 = 250.
Explanation 2:
We can perform all the jobs, since no two jobs overlap.
So the total profit is 50 + 20 + 100 = 170


public class Solution {
    class Pair {
        int st ;
        int ft ;
        int pt ;
           Pair (int st ,int ft , int pt){
               this.st = st ;
               this.ft = ft ;
               this.pt = pt ;
           }
    }
    public int solve(int[][] A) {
            int N = A.length ;
            Pair[] arr = new Pair[N] ;
              for (int i=0 ; i<N ; i++){
                  Pair p = new Pair(A[i][0] , A[i][1] , A[i][2]) ;
                  arr[i] = p ;
              }
              Arrays.sort (arr , new Comparator <Pair>(){
                  public int compare (Pair a , Pair b){
                      if (a.ft==b.ft){
                          return a.st - b.st ; 
                      } else {
                         return  a.ft - b.ft ;
                      }
                  }                 
              }) ;
               int[] dp = new int[N];
        dp[0] = arr[0].pt;
        for (int i = 1; i < N; i++) {
            int incl = arr[i].pt;
            int j = searchBinary(arr, i);
            if (j != -1) {
                incl += dp[j];
            }
            // Store the maximum profit achieved at each index
            dp[i] = Math.max(incl, dp[i - 1]);
        }
        // Return the maximum profit achieved by scheduling the jobs
        return dp[N - 1];
    }
    public int searchBinary(Pair[] arr, int i) {
        int start = 0;
        int end = i - 1;
        int result = -1;
        // Perform binary search to find the latest non-overlapping job
        while (start <= end) {
            int mid = (start + end) / 2;
            if (arr[mid].ft <= arr[i].st) {
                result = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        // Return the index of the latest non-overlapping job
        return result;
    }
}
