Problem Description
We have a list A of points (x, y) on the plane. Find the B closest points to the origin (0, 0).

Here, the distance between two points on a plane is the Euclidean distance.

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)

NOTE: Euclidean distance between two points P1(x1, y1) and P2(x2, y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).



Problem Constraints
1 <= B <= length of the list A <= 105
-105 <= A[i][0] <= 105
-105 <= A[i][1] <= 105



Input Format
The argument given is list A and an integer B.



Output Format
Return the B closest points to the origin (0, 0) in any order.



Example Input
Input 1:

 A = [ 
       [1, 3],
       [-2, 2] 
     ]
 B = 1
Input 2:

 A = [
       [1, -1],
       [2, -1]
     ] 
 B = 1


Example Output
Output 1:

 [ [-2, 2] ]
Output 2:

 [ [1, -1] ]


Example Explanation
Explanation 1:

 The Euclidean distance will be sqrt(10) for point [1,3] and sqrt(8) for point [-2,2].
 So one closest point will be [-2,2].
Explanation 2:

 The Euclidean distance will be sqrt(2) for point [1,-1] and sqrt(5) for point [2,-1].
 So one closest point will be [1,-1].




public class Solution {
    public int[][] solve(int[][] A, int B) {
                int n = A.length;
        int m = 2;
        //Create an Integer array so it could be sorted manually
        Integer [] [] arr = new Integer [n] [m];
        for(int i =0;i<n;i++){
            arr[i][0] = A[i][0];
            arr[i][1] = A[i][1];
        }
        Arrays.sort(arr,new Comparator<Integer[]>(){
            //write a function to manually sort according to the distance from origin
            public int compare(Integer [] a, Integer []b){
                int x1 = a[0];
                int y1 = a[1];
                int x2 = b[0];
                int y2 = b[1];
                /*distance of the points from origin. taking squareroot is not necessary
                as we only need to compare distances not calculate them*/
                int d1 = (x1*x1)+(y1*y1);
                int d2 = (x2*x2)+(y2*y2);
                return d1-d2;
            }
        });
        //create an new int array of size B to return as answer
        //fill it with first B elements of sorted Integer array
        int [][] ans = new int [B][2];
        for(int i=0;i<B;i++){
            ans[i][0] = arr[i][0];
            ans[i][1] = arr[i][1];
        }
        return ans;
       
    }
}
