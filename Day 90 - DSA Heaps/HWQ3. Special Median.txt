Problem Description
You are given an array A containing N numbers. This array is called special if it satisfies one of the following properties:

There exists an element A[i] in the array such that A[i] is equal to the median of elements [A[0], A[1], ...., A[i-1]]
There exists an element A[i] in the array such that A[i] is equal to the median of elements [A[i+1], A[i+2], ...., A[N-1]]
The Median is the middle element in the sorted list of elements. If the number of elements is even then the median will be (sum of both middle elements) / 2.

Return 1 if the array is special else return 0.

NOTE:

Do not neglect decimal point while calculating the median
For A[0] consider only the median of elements [A[1], A[2], ..., A[N-1]] (as there are no elements to the left of it)
For A[N-1] consider only the median of elements [A[0], A[1], ...., A[N-2]]


Problem Constraints
1 <= N <= 1000000.
A[i] is in the range of a signed 32-bit integer.



Input Format
The first and only argument is an integer array A.



Output Format
Return 1 if the given array is special else return 0.



Example Input
Input 1:

 A = [4, 6, 8, 4]
Input 2:

 A = [2, 7, 3, 1]


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explantion 1:

 Here, 6 is equal to the median of [8, 4].
Explanation 2:

 No element satisfies any condition.



public class Solution {
    public int solve(int[] A) {
       // Create maxHeap to store smaller half of elements and minHeap to store larger half of elements
      PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
      PriorityQueue<Integer> minHeap = new PriorityQueue<>();

      // First pass: Left to right

        maxHeap.add(A[0]);  // Add first element to maxHeap
        double midan = A[0];   // Initialize median with the first element
        for(int i=1; i<A.length; i++)
        {
            int curr = A[i];

             // Check if current element is equal to the median
             if(midan == curr)
             {
                 return 1; // Found special element
             }

            // Add current element to the appropriate heap  
              if(curr < midan)
              {
                  maxHeap.add(curr);
              }
              else
              {
                  minHeap.add(curr);
              }

             // Balance the sizes of maxHeap and minHeap
             balanceHeaps(maxHeap, minHeap);

              // Update the median based on the sizes of heaps
              if(maxHeap.size() == minHeap.size())
              {
                  midan = (maxHeap.peek() + minHeap.peek()) / 2.0;  // Average of the middle elements
              }
             else if(maxHeap.size() > minHeap.size())
              {
                  midan = maxHeap.peek();  // Middle element from maxHeap
              }
              else
              {
                  midan = minHeap.peek();   // Middle element from minHeap
              }
        }
         // Reset heaps for the second pass
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        minHeap = new PriorityQueue<>();

        // Second pass: Right to left
         maxHeap.add(A[A.length - 1]);  // Add first element to maxHeap
         midan = A[A.length - 1];   // Initialize median with the first element
        for(int i=A.length-2; i>=0; i--)
        {
            int curr = A[i];

             // Check if current element is equal to the median
             if(midan == curr)
             {
                 return 1; // Found special element
             }

            // Add current element to the appropriate heap  
              if(curr < midan)
              {
                  maxHeap.add(curr);
              }
              else
              {
                  minHeap.add(curr);
              }

             // Balance the sizes of maxHeap and minHeap
             balanceHeaps(maxHeap, minHeap);

              // Update the median based on the sizes of heaps
              if(maxHeap.size() == minHeap.size())
              {
                  midan = (maxHeap.peek() + minHeap.peek()) / 2.0;  // Average of the middle elements
              }
             else if(maxHeap.size() > minHeap.size())
              {
                  midan = maxHeap.peek();  // Middle element from maxHeap
              }
              else
              {
                  midan = minHeap.peek();   // Middle element from minHeap
              }
        }
         return 0;   // No special element found
    }
    // Function to balance the sizes of maxHeap and minHeap
    public void balanceHeaps(PriorityQueue<Integer>maxHeap, PriorityQueue<Integer>minHeap){
        if(maxHeap.size() - minHeap.size() > 1)
        {
            minHeap.add(maxHeap.poll());
        }
        else if(minHeap.size() - maxHeap.size() > 1)
        {
            maxHeap.add(minHeap.poll());
        }
    }
}