Problem Description
Two elements of a Binary Search Tree (BST), represented by root A are swapped by mistake. Tell us the 2 values, when swapped, will restore the Binary Search Tree (BST).

A solution using O(n) space is pretty straightforward. Could you devise a constant space solution?

Note: The 2 values must be returned in ascending order



Problem Constraints
1 <= size of tree <= 100000



Input Format
First and only argument is the head of the tree,A



Output Format
Return the 2 elements which need to be swapped.



Example Input
Input 1:

         1 
        / \ 
       2   3
Input 2:

 
         2
        / \
       3   1



Example Output
Output 1:

 [2, 1]
Output 2:

 [3, 1]


Example Explanation
Explanation 1:

Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
which is a valid BST 
Explanation 2:

Swapping 1 and 3 will change the BST to be 
         2
        / \
       1   3
which is a valid BST 



/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {ArrayList<Integer> in = new ArrayList<>();
    public ArrayList<Integer> recoverTree(TreeNode A) {
        ArrayList<Integer> res = new ArrayList<>();
        inorder(A);
        for(int i =1;i<in.size();i++)
        {
            if(in.get(i-1)>in.get(i))
            {
                   if(res.size()==0)
                   {
                   res.add(in.get(i));
                   res.add(in.get(i-1));
                   }else{
                       res.set(0,in.get(i));
                   }
            }
        }   
    return res;      
    }
    public void inorder(TreeNode a)
    {
        if(a==null) return;
        inorder(a.left);
        in.add(a.val);
        inorder(a.right);
    }
}