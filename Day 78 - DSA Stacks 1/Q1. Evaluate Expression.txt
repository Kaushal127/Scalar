Problem Description
An arithmetic expression is given by a string array A of size N. Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each string may be an integer or an operator.

Note: Reverse Polish Notation is equivalent to Postfix Expression, where operators are written after their operands.



Problem Constraints
1 <= N <= 105



Input Format
The only argument given is string array A.



Output Format
Return the value of arithmetic expression formed using reverse Polish Notation.



Example Input
Input 1:
A =   ["2", "1", "+", "3", "*"]
Input 2:
A = ["4", "13", "5", "/", "+"]


Example Output
Output 1:
9
Output 2:
6


Example Explanation
Explaination 1:
starting from backside:
    * : () * ()
    3 : () * (3)
    + : (() + ()) * (3)
    1 : (() + (1)) * (3)
    2 : ((2) + (1)) * (3)
    ((2) + (1)) * (3) = 9
Explaination 2:
starting from backside:
    + : () + ()
    / : () + (() / ())
    5 : () + (() / (5))
    13 : () + ((13) / (5))
    4 : (4) + ((13) / (5))
    (4) + ((13) / (5)) = 6



public class Solution {
    public int evalRPN(String[] A) {
        int n = A.length;
        Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < n; i++) {
            String s = A[i];
            if (isOperator(s)==true){
                char opr = s.charAt(0) ;
                int v2 = st.pop() ;
                int v1 = st.pop() ;
                int res = calculate(v1 ,v2,opr) ;
                st.push(res) ;  
            }
            else {
                int x = Integer.valueOf(s);
                st.push(x);
            }
        }
        return st.peek();
    }
    
     static boolean isOperator(String str) {
         int len =str.length() ;
         char ch = str.charAt(0) ;
         if (len==1 && (ch=='+' || ch=='-' || ch=='/' ||ch=='*' )){
             return true ;
         } else {
             return false ;
         }
     }
     static int calculate(int v1 , int v2 , char opr){
         if (opr=='+'){
             return v1+v2 ;
         } else if (opr=='-'){
             return v1-v2 ;
         } else if (opr=='*'){
             return v1*v2 ;
         } else {
             return v1/v2;
         }      
     }
}