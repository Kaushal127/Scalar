Problem Description

Given two strings - a text A and a pattern B, having lower-case alphabetic characters. You have to determine the number of occurrences of pattern B in text A as its substring. i.e. the number of times B occurs as a substring in A.



Problem Constraints

1 <= |B| <= |A| <= 105



Input Format

First argument is a string A

Second argument is a string B



Output Format

Return the number of occurrences.



Example Input

Input 1:

 A = "abababa"
 B = "aba" 
Input 2:

 A = "mississipi"
 B = "ss" 
Input 3:

 A = "hello" 
 B = "hi" 


Example Output

Output 1:

 3 
Output 2:

 2 
Output 3:

 0 


Example Explanation

Explanation 1:

 A has 3 substrings equal to B - A[1, 3], A[3, 5] and A[5, 7] 
Explanation 2:

 B occurs two times in A - A[3, 4], A[6, 7]. 
Explanation 3:

 B does not occur in A as a substring. 



public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int solve(final String A, final String B) {
        String str = B+ "#" + A ;
        int[] lps = LPS(str) ;
        int ans = 0 ;
          for (int i=0 ; i<lps.length ; i++){
              if (lps[i]==B.length()){
                  ans++ ;
              }
          }
          return ans ;
    }
    public int[] LPS(String S){
        int N = S.length() ;
        int[] lps = new int[N] ;
        lps[0] = 0 ;
          for (int i=1 ; i<N ; i++){
              int X = lps[i-1] ;
               while (S.charAt(i)!=S.charAt(X)){
                   if (X==0){
                       X=-1 ;
                       break ;
                   }
                   X = lps[X-1] ;
               }
               lps[i] = X+1 ;
          }
          return lps ;
    }
}
