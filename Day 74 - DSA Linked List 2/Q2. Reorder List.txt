Problem Description
Given a singly linked list A

 A: A0 → A1 → … → An-1 → An 
reorder it to:

 A0 → An → A1 → An-1 → A2 → An-2 → … 
You must do this in-place without altering the nodes' values.



Problem Constraints
1 <= |A| <= 106



Input Format
The first and the only argument of input contains a pointer to the head of the linked list A.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = [1, 2, 3, 4, 5] 
Input 2:

 A = [1, 2, 3, 4] 


Example Output
Output 1:

 [1, 5, 2, 4, 3] 
Output 2:

 [1, 4, 2, 3] 


Example Explanation
Explanation 1:

 The array will be arranged to [A0, An, A1, An-1, A2].
Explanation 2:

 The array will be arranged to [A0, An, A1, An-1, A2].


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reorderList(ListNode A) {
             if(A==null || A.next==null){
            return A;
        }
        return mid(A);
    }

     public ListNode mid(ListNode A) {
        ListNode mid=A;
        ListNode fast=A;
        while(fast!=null && fast.next!=null){
            mid=mid.next;
            fast=fast.next.next;
    }
    ListNode B=mid.next;
    mid.next=null;
    B=rev(B);
    return merge(A, B);
    }
   
    public ListNode rev(ListNode B) {
        ListNode prev=null;
        ListNode temp=B;
        ListNode curr=B;
        while(curr!=null){
            temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }return prev;
    }
      public ListNode merge(ListNode A, ListNode B){
        ListNode head;
        ListNode t1;
        ListNode t2;
        head=t1=A;
        t2=B;
        while(A!=null && B!=null){
            t1=t1.next;
            A.next=B;
            t2=t2.next;
            B.next=t1;
            A=t1;
            B=t2;
        }return head;
    }
}