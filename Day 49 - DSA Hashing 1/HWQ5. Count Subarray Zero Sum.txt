Problem Description
Given an array A of N integers.

Find the count of the subarrays in the array which sums to zero. Since the answer can be very large, return the remainder on dividing the result with 109+7


Problem Constraints
1 <= N <= 105
-109 <= A[i] <= 109


Input Format
Single argument which is an integer array A.


Output Format
Return an integer.


Example Input
Input 1:

 A = [1, -1, -2, 2]
Input 2:

 A = [-1, 2, -1]


Example Output
Output 1:

3
Output 2:

1


Example Explanation
Explanation 1:

 The subarrays with zero sum are [1, -1], [-2, 2] and [1, -1, -2, 2].
Explanation 2:

 The subarray with zero sum is [-1, 2, -1].

Solution 

public class Solution {
    public int solve(int[] A) {
         int N = A.length ;
        int mod=1000000007;
        long count = 0l ;
        long[] PS = new long [N] ;
        PS[0] = A[0] ;
        if (PS[0]==0){
            count++ ;
        }
        for (int i=1 ;i<N ; i++) {
            PS[i] = (PS[i-1] + A[i]) %mod ;
            if (PS[i]==0){
                count++ ;
            }
        }
         HashMap<Long,Integer> map=new HashMap<>();
         long count2= 0l ;
        for(int i=0;i<PS.length;i++){
            if(map.containsKey(PS[i])){
                count2=count2+map.get(PS[i]);  
                map.put(PS[i],map.get(PS[i])+1);  
            }
            else{
                map.put(PS[i],1);  
            }
        }
         
        int ans = (int)(count + count2) ;
        return ans ; 
    }
}
