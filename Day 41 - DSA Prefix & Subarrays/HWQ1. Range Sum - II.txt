Problem Description
Given an integer array A of size N. You are asked to perfom Q queries on the given array and return the final array after processing all queries.

Each query is of type ( l, r, c), for each query add c in index range l to r.

NOTE: Value of each element in the final array will fit in 32 bit signed integer.



Problem Constraints
1 <= N, Q <= 105

-106 <= A[i], c <= 106

1 <= l <= r <= N



Input Format
First argument is an integer array A of size N.

Second argument is a 2d array B of size Q x 3, where B[i][0] = l, B[i][1] = r and B[i][2] = c.



Output Format
Return the final array after processing all queries.



Example Input
Input 1:

 A = [1, 2, 1, 4]
 B = [
       [2, 3, 2]
       [1, 4, 5]
       [4, 4, 1]
     ]
Input 2:

 A = [1, 1, 2]
 B = [
       [2, 3, 2]
       [1, 3, 5]
     ]


Example Output
Output 1:

 [6, 9, 8, 10]
Output 2:

 [6, 8, 9]


Example Explanation
Explanation 1:

 First query, l = 2, r = 3, c = 2, after processing array becomes : [1, 4, 3, 4]
 Second query, l = 1, r = 4, c = 5, after processing array becomes : [6, 9, 8, 9]
 Third query, l = 4, r = 4, c = 1, after processing array becomes : [6, 9, 8, 10]
 Final array is [6, 9, 8, 10]
Explanation 2:

 First query, l = 2, r = 3, c = 2, after processing array becomes : [1, 3, 4]
 Second query, l = 1, r = 3, c = 5, after processing array becomes : [6, 8, 9]
 Final array is [6, 8, 9]

public class Solution {
    public int[] solve(int[] A, int[][] B) {
     int N = A.length  ;
     int[] arr = new int[N] ;
        for (int i=0 ; i<B.length ; i++){
            int s = B[i][0] - 1 ;
            int e = B[i][1] - 1;
            int r = B[i][2] ;
              arr[s] += r ;
              if ((e+1)<N){
                  arr[e+1] += -r ;
              }  
        } 
        int sum = 0 ;
        for (int i=0 ; i<N ; i++){
            sum += arr[i] ;
            arr[i] = sum;
            A[i] = arr[i] + A[i] ;
         }
        return A ;
    }
}
